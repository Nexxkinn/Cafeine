<ContentDialog
    x:Class="Cafeine.Views.Wizard.OfflineItemWizard"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:Cafeine.Views.Wizard"
    xmlns:m="using:Cafeine.Models"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="Cafeine.ViewModels.Wizard"
    Title="{x:Bind Viewmodel.Title, Mode=OneWay}"
    Background="{StaticResource LegacyDarkBlue}"
    mc:Ignorable="d">
    <ContentDialog.Resources>
        <x:Double x:Key="ContentDialogMaxWidth">700</x:Double>
    </ContentDialog.Resources>
    <Grid Width="600">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <StackPanel
            x:Name="Stage0"
            Grid.Row="0"
            Height="200"
            x:Load="{x:Bind Viewmodel.Stage.Equals(0), Mode=OneWay}"
            Loaded="{x:Bind Viewmodel.Stage0_load}">
            <TextBlock Text="Please make sure your files are following this name structure:" />
            <TextBlock
                Margin="0,20"
                HorizontalAlignment="Center"
                FontSize="15"
                FontWeight="SemiBold"
                Text="[&lt;fansub&gt;] &lt;series_title&gt; - &lt;series_episode&gt; [&lt;hash&gt;]" />
            <TextBlock Text="Hash and fansub paramater are optional, as the app only needs the series title and episode number to identify the file. Otherwise, you are required to implement your own custom regex parser." TextWrapping="WrapWholeWords" />
            <TextBlock Margin="0,8" Text="Most fansubs nowadays follow this name structure and can be ignored." />
        </StackPanel>
        <StackPanel
            x:Name="Stage1"
            Grid.Row="0"
            x:Load="{x:Bind Viewmodel.Stage.Equals(1), Mode=OneWay, FallbackValue=x:False}"
            Loaded="{x:Bind Viewmodel.Stage1_load}">
            <local:BrowseButton Margin="0,0,0,20" StorageFolderSelected="{x:Bind Viewmodel.Stage1_TryProcessFolder}" />
            <Grid x:Name="ViewResults" x:Load="{x:Bind Viewmodel.Stage1_ViewResults, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <StackPanel>
                    <TextBlock Text="{x:Bind Viewmodel.Message, Mode=OneWay}" Visibility="{x:Bind Viewmodel.DisplayWarningVisibility, Mode=OneWay}" />
                    <CheckBox Content="Group episode list" />
                    <CheckBox Content="Use custom regex" />
                </StackPanel>
                <ListView
                    x:Name="OnList"
                    Grid.Row="1"
                    Grid.Column="0"
                    Height="200"
                    ContainerContentChanging="OnList_ContainerContentChanging"
                    Header="Indentified files"
                    ItemsSource="{x:Bind Viewmodel.MatchedList, Mode=OneWay}">
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="m:ContentList">
                            <local:EpisodeListControl
                                DataContext="{x:Bind}"
                                DeleteClicked="EpisodeListControl_DeleteClick"
                                LoadEpisodeNumber="True" />
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <ListView
                    x:Name="NotOnList"
                    Grid.Row="1"
                    Grid.Column="1"
                    Height="200"
                    Header="Unidentified files"
                    ItemsSource="{x:Bind Viewmodel.UnmatchedList, Mode=OneWay}">
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="m:ContentList">
                            <local:EpisodeListControl DataContext="{x:Bind}" DeleteClicked="EpisodeNotOnListControl_DeleteClick" />
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
        </StackPanel>

        <StackPanel
            x:Name="ButtonStackPanel"
            Grid.Row="1"
            HorizontalAlignment="Right"
            x:Load="{x:Bind Viewmodel.IsButtonLoaded, Mode=OneWay}"
            Orientation="Horizontal">
            <Button
                Width="100"
                Margin="0,0,20,0"
                Click="{x:Bind Viewmodel.PreviousButtonClicked}"
                Content="Previous"
                IsEnabled="{x:Bind Viewmodel.NotEqual(0), Mode=OneWay}" />
            <Button
                Width="100"
                Margin="0,0,20,0"
                Click="{x:Bind Viewmodel.NextButtonClicked}"
                Content="Next"
                IsEnabled="{x:Bind Viewmodel.IsNextButtonEnabled, Mode=OneWay}" />
            <Button
                Width="100"
                Margin="0,0,2,0"
                Click="{x:Bind CancelButtonClicked}"
                Content="Cancel" />
        </StackPanel>
        <StackPanel
            x:Name="FinishedButtonStackPanel"
            Grid.Row="1"
            x:Load="{x:Bind Viewmodel.IsButtonLoaded.Equals(x:False), Mode=OneWay}">
            <Button Click="{x:Bind FinishedButtonClicked}" Content="Done" />
        </StackPanel>
    </Grid>
</ContentDialog>
